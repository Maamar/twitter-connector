/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.twitter;

import org.mule.api.MuleContext;
import org.mule.api.context.MuleContextAware;
import org.mule.api.lifecycle.Initialisable;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.tools.cloudconnect.annotations.Connector;
import org.mule.tools.cloudconnect.annotations.Operation;
import org.mule.tools.cloudconnect.annotations.Parameter;
import org.mule.tools.cloudconnect.annotations.Property;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import twitter4j.GeoLocation;
import twitter4j.IDs;
import twitter4j.Paging;
import twitter4j.Query;
import twitter4j.QueryResult;
import twitter4j.ResponseList;
import twitter4j.Status;
import twitter4j.StatusUpdate;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.User;
import twitter4j.auth.AccessToken;
import twitter4j.auth.RequestToken;
import twitter4j.conf.ConfigurationBuilder;
import twitter4j.internal.http.alternative.HttpClientImpl;

@Connector(namespacePrefix = "twitter")
public class TwitterConnector implements Initialisable, MuleContextAware {
    protected transient Log logger = LogFactory.getLog(getClass());

    private Twitter twitter;
    
    @Property
    private String consumerKey;

    @Property
    private String consumerSecret;

    @Property(optional=true)
    private String accessToken;

    @Property(optional=true)
    private String accessTokenSecret;

    @Property(optional=true)
    private boolean useSSL;
    
    @Override
    public void initialise() throws InitialisationException {
        ConfigurationBuilder cb = new ConfigurationBuilder();
        cb.setUseSSL(useSSL);
        
        twitter = new TwitterFactory(cb.build()).getInstance();

        twitter.setOAuthConsumer(consumerKey, consumerSecret);
        if (accessToken != null) {
            twitter.setOAuthAccessToken(new AccessToken(accessToken, accessTokenSecret));
        }
    }

    @Operation
    public QueryResult search(String query) throws TwitterException {
        return twitter.search(new Query(query));
    }

    @Operation
    public ResponseList<Status> getPublicTimeline() throws TwitterException {
        return twitter.getPublicTimeline();
    }

    @Operation
    public ResponseList<Status> getHomeTimeline(@Parameter(defaultValue="1", optional=true) int page, @Parameter(defaultValue="100",optional=true) int count) throws TwitterException {
        return twitter.getHomeTimeline(new Paging(page, count));
    }

    @Operation
    public ResponseList<Status> getUserTimelineByScreenName(String screenName, @Parameter(defaultValue="1", optional=true) int page, @Parameter(defaultValue="100",optional=true) int count) throws TwitterException {
        return twitter.getUserTimeline(screenName, new Paging(page, count));
    }

    @Operation
    public ResponseList<Status> getUserTimelineByUserId(long userId, @Parameter(defaultValue="1", optional=true) int page, @Parameter(defaultValue="100",optional=true) int count) throws TwitterException {
        return twitter.getUserTimeline(userId, new Paging(page, count));
    }

    @Operation
    public ResponseList<Status> getUserTimeline(@Parameter(defaultValue="1", optional=true) int page, @Parameter(defaultValue="100",optional=true) int count) throws TwitterException {
        return twitter.getUserTimeline(new Paging(page, count));
    }

    @Operation
    public ResponseList<Status> getMentions(@Parameter(defaultValue="1", optional=true) int page, @Parameter(defaultValue="100",optional=true) int count) throws TwitterException {
        return twitter.getMentions(new Paging(page, count));
    }

    @Operation
    public ResponseList<Status> getRetweetedByMe(@Parameter(defaultValue="1", optional=true) int page, @Parameter(defaultValue="100",optional=true) int count) throws TwitterException {
        return twitter.getRetweetedByMe(new Paging(page, count));
    }

    @Operation
    public ResponseList<Status> getRetweetedToMe(@Parameter(defaultValue="1", optional=true) int page, @Parameter(defaultValue="100",optional=true) int count) throws TwitterException {
        return twitter.getRetweetedToMe(new Paging(page, count));
    }

    @Operation
    public ResponseList<Status> getRetweetsOfMe(@Parameter(defaultValue="1", optional=true) int page, @Parameter(defaultValue="100",optional=true) int count) throws TwitterException {
        return twitter.getRetweetsOfMe(new Paging(page, count));
    }

    @Operation
    public ResponseList<Status> getRetweetedToUserByScreenName(String screenName, @Parameter(defaultValue="1", optional=true) int page, @Parameter(defaultValue="100",optional=true) int count) throws TwitterException {
        return twitter.getRetweetedToUser(screenName, new Paging(page, count));
    }

    @Operation
    public ResponseList<Status> getRetweetedToUserByUserId(long userId, @Parameter(defaultValue="1", optional=true) int page, @Parameter(defaultValue="100",optional=true) int count) throws TwitterException {
        return twitter.getRetweetedToUser(userId, new Paging(page, count));
    }

    @Operation
    public ResponseList<Status> getRetweetedByUserByScreenName(String screenName,
                                                               @Parameter(defaultValue = "1", optional = true) int page,
                                                               @Parameter(defaultValue = "100", optional = true) int count) throws TwitterException {
        return twitter.getRetweetedByUser(screenName, new Paging(page, count));
    }

    @Operation
    public ResponseList<Status> getRetweetedByUserByUserId(long userId,
                                                           @Parameter(defaultValue = "1", optional = true) int page,
                                                           @Parameter(defaultValue = "100", optional = true) int count) throws TwitterException {
        return twitter.getRetweetedByUser(userId, new Paging(page, count));
    }

    @Operation
    public Status showStatus(long id) throws TwitterException {
        return twitter.showStatus(id);
    }

    @Operation
    public Status updateStatus(String status, 
                               @Parameter(optional=true, defaultValue="-1") long inReplyTo,
                               @Parameter(optional=true) GeoLocation geoLocation) throws TwitterException {
        StatusUpdate update = new StatusUpdate(status);
        if (inReplyTo > 0) {
           update.setInReplyToStatusId(inReplyTo);
        }
        if (geoLocation != null) {
            update.setLocation(geoLocation);
        }
        
        return twitter.updateStatus(status);
    }

    @Operation
    public Status destroyStatus(long statusId) throws TwitterException {
        return twitter.destroyStatus(statusId);
    }

    @Operation
    public Status retweetStatus(long statusId) throws TwitterException {
        return twitter.retweetStatus(statusId);
    }

    @Operation
    public ResponseList<Status> getRetweets(long statusId) throws TwitterException {
        return twitter.getRetweets(statusId);
    }

    @Operation
    public ResponseList<User> getRetweetedBy(long statusId,
                                             @Parameter(defaultValue = "1", optional = true) int page,
                                             @Parameter(defaultValue = "100", optional = true) int count) throws TwitterException {
        return twitter.getRetweetedBy(statusId, new Paging(page, count));
    }

    @Operation
    public IDs getRetweetedByIDs(long statusId,
                                 @Parameter(defaultValue = "1", optional = true) int page,
                                 @Parameter(defaultValue = "100", optional = true) int count) throws TwitterException {
        return twitter.getRetweetedByIDs(statusId, new Paging(page, count));
    }
    

    @Operation
    public void setOauthVerifier(String oauthVerifier) throws TwitterException {
        AccessToken accessToken = twitter.getOAuthAccessToken(oauthVerifier);
        logger.info("Got OAuth access tokens. Access token:"  + accessToken.getToken() + " Access token secret:" + accessToken.getTokenSecret());
    }

    @Operation
    public String requestAuthorization(@Parameter(optional=true) String callbackUrl) throws TwitterException {
        RequestToken token = twitter.getOAuthRequestToken();
        
        return token.getAuthorizationURL();
    }


    public Twitter getTwitterClient() {
        return twitter;
    }

    public boolean getUseSSL() {
        return useSSL;
    }

    public void setUseSSL(boolean useSSL) {
        this.useSSL = useSSL;
    }

    public void setAccessToken(String accessToken) {
        this.accessToken = accessToken;
    }

    public void setAccessTokenSecret(String accessTokenSecret) {
        this.accessTokenSecret = accessTokenSecret;
    }

    public void setConsumerKey(String consumerKey) {
        this.consumerKey = consumerKey;
    }

    public void setConsumerSecret(String consumerSecret) {
        this.consumerSecret = consumerSecret;
    }

    @Override
    public void setMuleContext(MuleContext context) {
        HttpClientImpl.setMuleContext(context);
    }

}
